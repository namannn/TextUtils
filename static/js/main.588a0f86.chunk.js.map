{"version":3,"sources":["Components/About.js","Components/Alert.js","Components/Navbar.js","Components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","myStyle","color","mode","backgroundColor","myStyle2","className","style","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","Alert","height","alert","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","to","title","aria-label","aria-current","aboutText","onClick","toggleMode","defaultChecked","htmlFor","defaultProps","TextForm","useState","text","setText","heading","value","onChange","event","target","rows","disabled","length","newText","showAlert","split","join","navigator","clipboard","writeText","filter","element","App","setMode","setAlert","bodyBgColor","setBodyBgColor","document","body","message","setTimeout","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.588a0f86.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function About(props) {\r\n    // const [myStyle, setMyStyle] = useState({\r\n    //     color: \"black\",\r\n    //     backgroundColor: \"white\",\r\n    // });\r\n\r\n    let myStyle = {\r\n        color: props.mode === 'dark' ? 'white' : \"black\",\r\n        backgroundColor: props.mode === 'dark' ? '#24334e' : \"white\"\r\n    }\r\n\r\n    let myStyle2 = {\r\n        color: props.mode === 'dark' ? 'white' : \"black\",\r\n        backgroundColor: props.mode === 'dark' ? 'rgb(79 86 118)' : \"white\"\r\n    }\r\n\r\n    return (\r\n        <div className=\"container px-5\" style={myStyle}>\r\n            <h2 className=\"my-3\">About Us</h2>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button\r\n                            className=\"accordion-button\"\r\n                            type=\"button\"\r\n                            data-bs-toggle=\"collapse\"\r\n                            data-bs-target=\"#collapseOne\"\r\n                            aria-expanded=\"true\"\r\n                            aria-controls=\"collapseOne\"\r\n                            style={myStyle2}\r\n                        >\r\n                            Analyze your text\r\n                        </button>\r\n                    </h2>\r\n                    <div\r\n                        id=\"collapseOne\"\r\n                        className=\"accordion-collapse collapse show\"\r\n                        aria-labelledby=\"headingOne\"\r\n                        data-bs-parent=\"#accordionExample\"\r\n                    >\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the first item's accordion body.</strong> It is\r\n                            shown by default, until the collapse plugin adds the appropriate\r\n                            classes that we use to style each element. These classes control\r\n                            the overall appearance, as well as the showing and hiding via CSS\r\n                            transitions. You can modify any of this with custom CSS or\r\n                            overriding our default variables. It's also worth noting that just\r\n                            about any HTML can go within the <code>.accordion-body</code>,\r\n                            though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button\r\n                            className=\"accordion-button collapsed\"\r\n                            type=\"button\"\r\n                            data-bs-toggle=\"collapse\"\r\n                            data-bs-target=\"#collapseTwo\"\r\n                            aria-expanded=\"false\"\r\n                            aria-controls=\"collapseTwo\"\r\n                            style={myStyle2}\r\n                        >\r\n                            Free to use\r\n                        </button>\r\n                    </h2>\r\n                    <div\r\n                        id=\"collapseTwo\"\r\n                        className=\"accordion-collapse collapse\"\r\n                        aria-labelledby=\"headingTwo\"\r\n                        data-bs-parent=\"#accordionExample\"\r\n                    >\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the second item's accordion body.</strong> It is\r\n                            hidden by default, until the collapse plugin adds the appropriate\r\n                            classes that we use to style each element. These classes control\r\n                            the overall appearance, as well as the showing and hiding via CSS\r\n                            transitions. You can modify any of this with custom CSS or\r\n                            overriding our default variables. It's also worth noting that just\r\n                            about any HTML can go within the <code>.accordion-body</code>,\r\n                            though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button\r\n                            className=\"accordion-button collapsed\"\r\n                            type=\"button\"\r\n                            data-bs-toggle=\"collapse\"\r\n                            data-bs-target=\"#collapseThree\"\r\n                            aria-expanded=\"false\"\r\n                            aria-controls=\"collapseThree\"\r\n                            style={myStyle2}\r\n                        >\r\n                            Browser compatible\r\n                        </button>\r\n                    </h2>\r\n                    <div\r\n                        id=\"collapseThree\"\r\n                        className=\"accordion-collapse collapse\"\r\n                        aria-labelledby=\"headingThree\"\r\n                        data-bs-parent=\"#accordionExample\"\r\n                    >\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the third item's accordion body.</strong> It is\r\n                            hidden by default, until the collapse plugin adds the appropriate\r\n                            classes that we use to style each element. These classes control\r\n                            the overall appearance, as well as the showing and hiding via CSS\r\n                            transitions. You can modify any of this with custom CSS or\r\n                            overriding our default variables. It's also worth noting that just\r\n                            about any HTML can go within the <code>.accordion-body</code>,\r\n                            though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nfunction Alert(props) {\r\n\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        <div style={{height: \"50px\"}}>\r\n        {props.alert && <div>\r\n            <div className={`alert alert-${props.alert.type} fade show`} role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n            </div>\r\n        </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert;\r\n\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" aria-current=\"page\" to=\"/\">Home</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n            </li>\r\n          </ul>\r\n          <div className={`form-check form-switch text-${props.mode === 'dark' ? 'light' : 'dark'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckChecked\" defaultChecked/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckChecked\">Enable Dark Mode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  title: 'Set title here',\r\n  aboutText: 'About'\r\n}\r\n\r\nexport default Navbar\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    if(text.length === 0){\r\n        props.showAlert(\"Please enter something in the text box below!\", \"danger\")\r\n        return;\r\n    }\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to uppercase!\", \"success\");\r\n  };\r\n\r\n  const handleLowClick = () => {\r\n    if(text.length === 0){\r\n        props.showAlert(\"Please enter something in the text box below!\", \"danger\")\r\n        return;\r\n    }\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to lowercase!\", \"success\");\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const handleExtraSpaces = () => {\r\n    if(text.length === 0){\r\n        props.showAlert(\"Please enter something in the text box below!\", \"danger\")\r\n        return;\r\n    }\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra spaces removed!\", \"success\");\r\n  };\r\n\r\n  const handleCopy = () => {\r\n      navigator.clipboard.writeText(text);\r\n      props.showAlert(\"Copied to Clipboard!\", \"success\");\r\n  }\r\n\r\n  const [text, setText] = useState(\"\");\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{\r\n          color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n        }}\r\n      >\r\n        <h1 className=\"mb-3\">{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            style={{\r\n              backgroundColor: props.mode === \"light\" ? \"white\" : \"#272936\",\r\n              color: props.mode === \"light\" ? \"black\" : \"white\",\r\n            }}\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1 \" onClick={handleUpClick}>\r\n          Upper Case\r\n        </button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleLowClick}>\r\n          Lower Case\r\n        </button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleExtraSpaces}>\r\n          Remove Extra Spaces\r\n        </button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleCopy}>\r\n          Copy\r\n        </button>\r\n        <button\r\n          disabled={text.length===0}\r\n          className=\"btn btn-danger mx-1 my-1\"\r\n          onClick={() => {\r\n            setText(\"\");\r\n            props.showAlert(\"Cleared!\", \"success\");\r\n          }}\r\n        >\r\n          Clear\r\n        </button>\r\n      </div>\r\n\r\n      <div\r\n        className=\"container my-3\"\r\n        style={{\r\n          color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n        }}\r\n      >\r\n        <h2>Your text summary</h2>\r\n        <p>\r\n          {text.split(/\\s+/).filter((element) => {return element.length !== 0}).length} words; {text.length} characters\r\n        </p>\r\n        <p>{0.008 * (text.split(/\\s+/).filter((element) => {return element.length !== 0}).length)} minutes read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0? text : \"Enter something in the textbox above to preview it here.\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport About from \"./Components/About\";\nimport Alert from \"./Components/Alert\";\nimport Navbar from \"./Components/Navbar\";\nimport TextForm from \"./Components/TextForm\";\nimport {\n  HashRouter as Router,\n  Route,\n  Routes\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"dark\");\n  const [alert, setAlert] = useState(null);\n  const [bodyBgColor, setBodyBgColor] = useState(\"#24334e\")\n  document.body.style.backgroundColor = bodyBgColor;\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  }\n\n  const toggleMode = () => {\n    if(mode === 'light'){\n      setMode('dark');\n      setBodyBgColor('#24334e');\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    }\n    else{\n      setMode('light');\n      setBodyBgColor('white');\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n  }\n\n  return (\n    <>\n    <Router>\n      <Navbar title=\"textUtils\" aboutText=\"About Us\" mode={mode} toggleMode={toggleMode}/>\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n        <Routes>\n          <Route path=\"/about\" element={<About mode={mode}/>}/>\n          <Route path=\"/\" element={<TextForm heading=\"TextUtils - Word Counter, Character Counter\" mode={mode} showAlert={showAlert}/>} />\n        </Routes> \n      </div>\n    </Router>\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}